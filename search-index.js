var searchIndex = {};
searchIndex["qrencode"] = {"doc":"","items":[[5,"main","qrencode","",null,{"inputs":[],"output":null}]],"paths":[]};
searchIndex["qrcode"] = {"doc":"QRCode encoder","items":[[3,"QrCode","qrcode","The encoded QR code symbol.",null,null],[0,"types","","",null,null],[4,"QrError","qrcode::types","`QrError` encodes the error encountered when generating a QR code.",null,null],[13,"DataTooLong","","The data is too long to encode into a QR code for the given version.",0,null],[13,"InvalidVersion","","The provided version / error correction level combination is invalid.",0,null],[13,"UnsupportedCharacterSet","","Some characters in the data cannot be supported by the provided QR code\nversion.",0,null],[13,"InvalidEciDesignator","","The provided ECI designator is invalid. A valid designator should be\nbetween 0 and 999999.",0,null],[13,"InvalidCharacter","","A character not belonging to the character set is found.",0,null],[4,"EcLevel","","The error correction level. It allows the original information be recovered\neven if parts of the code is damaged.",null,null],[13,"L","","Low error correction. Allows up to 7% of wrong blocks.",1,null],[13,"M","","Medium error correction (default). Allows up to 15% of wrong blocks.",1,null],[13,"Q","","&quot;Quartile&quot; error correction. Allows up to 25% of wrong blocks.",1,null],[13,"H","","High error correction. Allows up to 30% of wrong blocks.",1,null],[4,"Version","","In QR code terminology, `Version` means the size of the generated image.\nLarger version means the size of code is larger, and therefore can carry\nmore information.",null,null],[13,"Normal","","A normal QR code version. The parameter should be between 1 and 40.",2,null],[13,"Micro","","A Micro QR code version. The parameter should be between 1 and 4.",2,null],[4,"Mode","","The mode indicator, which specifies the character set of the encoded data.",null,null],[13,"Numeric","","The data contains only characters 0 to 9.",3,null],[13,"Alphanumeric","","The data contains only uppercase letters (A–Z), numbers (0–9) and a few\npunctuations marks (space, `$`, `%`, `*`, `+`, `-`, `.`, `/`, `:`).",3,null],[13,"Byte","","The data contains arbitrary binary data.",3,null],[13,"Kanji","","The data contains Shift-JIS-encoded double-byte text.",3,null],[6,"QrResult","","`QrResult` is a convenient alias for a QR code generation result.",null,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"width","","Get the number of &quot;modules&quot; on each size of the QR code, i.e. the width\nand height of the code.",2,null],[11,"fetch","","Obtains an object from a hard-coded table.",2,null],[11,"mode_bits_count","","The number of bits needed to encode the mode indicator.",2,null],[11,"is_micro","","Checks whether is version refers to a Micro QR code.",2,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"fmt","","",3,null],[11,"length_bits_count","","Computes the number of bits needed to encode the data length.",3,null],[11,"data_bits_count","","Computes the number of bits needed to some data of a given raw length.",3,null],[11,"max","","Find the lowest common mode which both modes are compatible with.",3,null],[11,"partial_cmp","","Defines a partial ordering between modes. If `a &lt;= b`, then `b` contains\na superset of all characters supported by `a`.",3,null],[0,"bits","qrcode","The `bits` module encodes binary data into raw bits used in a QR code.",null,null],[3,"Bits","qrcode::bits","The `Bits` structure stores the encoded data for a QR code.",null,null],[4,"ExtendedMode","","An &quot;extended&quot; mode indicator, includes all indicators supported by QR code\nbeyond those bearing data.",null,null],[13,"Eci","","ECI mode indicator, to introduce an ECI designator.",4,null],[13,"Data","","The normal mode to introduce data.",4,null],[13,"Fnc1First","","FNC-1 mode in the first position.",4,null],[13,"Fnc1Second","","FNC-1 mode in the second position.",4,null],[13,"StructuredAppend","","Structured append.",4,null],[5,"encode_auto","","Automatically determines the minimum version to store the data, and encode\nthe result.",null,null],[11,"new","","Constructs a new, empty bits structure.",5,{"inputs":[{"name":"version"}],"output":{"name":"bits"}}],[11,"into_bytes","","Convert the bits into a bytes vector.",5,null],[11,"len","","Total number of bits currently pushed.",5,null],[11,"max_len","","The maximum number of bits allowed by the provided QR code version and\nerror correction level.",5,null],[11,"version","","Version of the QR code.",5,null],[11,"clone","","",4,null],[11,"push_mode_indicator","","Push the mode indicator to the end of the bits.",5,null],[11,"push_eci_designator","","Push an ECI (Extended Channel Interpretation) designator to the bits.",5,null],[11,"push_numeric_data","","Encodes a numeric string to the bits.",5,null],[11,"push_alphanumeric_data","","Encodes an alphanumeric string to the bits.",5,null],[11,"push_byte_data","","Encodes 8-bit byte data to the bits.",5,null],[11,"push_kanji_data","","Encodes Shift JIS double-byte data to the bits.",5,null],[11,"push_fnc1_first_position","","Encodes an indicator that the following data are formatted according to\nthe UCC/EAN Application Identifiers standard.",5,null],[11,"push_fnc1_second_position","","Encodes an indicator that the following data are formatted in accordance\nwith specific industry or application specifications previously agreed\nwith AIM International.",5,null],[11,"push_terminator","","Pushes the ending bits to indicate no more data.",5,null],[11,"push_segments","","Push a segmented data to the bits, and then terminate it.",5,null],[11,"push_optimal_data","","Pushes the data the bits, using the optimal encoding.",5,null],[0,"optimize","qrcode","Find the optimal data mode sequence to encode a piece of data.",null,null],[3,"Segment","qrcode::optimize","A segment of data committed to an encoding mode.",null,null],[12,"mode","","The encoding mode of the segment of data.",6,null],[12,"begin","","The start index of the segment.",6,null],[12,"end","","The end index (exclusive) of the segment.",6,null],[3,"Parser","","QR code data parser to classify the input into distinct segments.",null,null],[3,"Optimizer","","",null,null],[5,"total_encoded_len","","Computes the total encoded length of all segments.",null,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"encoded_len","","Compute the number of bits (including the size of the mode indicator and\nlength bits) when this segment is encoded.",6,null],[11,"new","","Creates a new iterator which parse the data into segments that only\ncontains their exclusive subsets. No optimization is done at this point.",7,null],[11,"next","","",7,null],[11,"new","","Optimize the segments by combining adjacent segments when possible.",8,{"inputs":[{"name":"i"},{"name":"version"}],"output":{"name":"optimizer"}}],[11,"optimize","","",7,null],[11,"next","","",8,null],[0,"ec","qrcode","The `ec` module applies the Reed-Solomon error correction codes.",null,null],[5,"create_error_correction_code","qrcode::ec","Creates the error correction code in N bytes.",null,null],[5,"construct_codewords","","Constructs data and error correction codewords ready to be put in the QR\ncode matrix.",null,null],[5,"max_allowed_errors","","Computes the maximum allowed number of erratic modules can be introduced to\nthe QR code, before the data becomes truly corrupted.",null,{"inputs":[{"name":"version"},{"name":"eclevel"}],"output":{"name":"qrresult"}}],[0,"canvas","qrcode","The `canvas` module puts raw bits into the QR code canvas.",null,null],[3,"Canvas","qrcode::canvas","`Canvas` is an intermediate helper structure to render error-corrected data\ninto a QR code.",null,null],[4,"Module","","The color of a module (pixel) in the QR code.",null,null],[13,"Empty","","The module is empty.",9,null],[13,"Light","","The module is light (white), and cannot be masked. This mainly refers to\nmodules of functional patterns.",9,null],[13,"Dark","","The module is dark (black), and cannot be masked. This mainly refers to\nmodules of functional patterns.",9,null],[13,"LightUnmasked","","The module is light (white), but not yet masked. This mainly refers to\nmodules of data and error correction bits before masking.",9,null],[13,"DarkUnmasked","","The module is dark (black), but not yet masked. This mainly refers to\nmodules of data and error correction bits before masking.",9,null],[4,"MaskPattern","","The mask patterns. Since QR code and Micro QR code do not use the same\npattern number, we name them according to their shape instead of the number.",null,null],[13,"Checkerboard","","QR code pattern 000: `(x + y) % 2 == 0`.",10,null],[13,"HorizontalLines","","QR code pattern 001: `y % 2 == 0`.",10,null],[13,"VerticalLines","","QR code pattern 010: `x % 3 == 0`.",10,null],[13,"DiagonalLines","","QR code pattern 011: `(x + y) % 3 == 0`.",10,null],[13,"LargeCheckerboard","","QR code pattern 100: `((x/3) + (y/2)) % 2 == 0`.",10,null],[13,"Fields","","QR code pattern 101: `(x*y)%2 + (x*y)%3 == 0`.",10,null],[13,"Diamonds","","QR code pattern 110: `((x*y)%2 + (x*y)%3) % 2 == 0`.",10,null],[13,"Meadow","","QR code pattern 111: `((x+y)%2 + (x*y)%3) % 2 == 0`.",10,null],[5,"is_functional","","Gets whether the module at the given coordinates represents a functional\nmodule.",null,{"inputs":[{"name":"version"},{"name":"i16"},{"name":"i16"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"eq","","",9,null],[11,"is_dark","","Checks whether a module is dark.",9,null],[11,"mask","","Apply a mask to the unmasked modules.",9,null],[11,"clone","","",11,null],[11,"new","","Constructs a new canvas big enough for a QR code of the given version.",11,{"inputs":[{"name":"version"},{"name":"eclevel"}],"output":{"name":"canvas"}}],[11,"get","","Obtains a module at the given coordinates. For convenience, negative\ncoordinates will wrap around.",11,null],[11,"get_mut","","Obtains a mutable module at the given coordinates. For convenience,\nnegative coordinates will wrap around.",11,null],[11,"put","","Sets the color of a module at the given coordinates. For convenience,\nnegative coordinates will wrap around.",11,null],[11,"draw_all_functional_patterns","","Draw all functional patterns, before data placement.",11,null],[11,"draw_data","","Draws the encoded data and error correction codes to the empty modules.",11,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"apply_mask","","Applies a mask to the canvas. This method will also draw the format info\npatterns.",11,null],[11,"apply_best_mask","","Construct a new canvas and apply the best masking that gives the lowest\npenalty score.",11,null],[11,"to_bools","","Convert the modules into a vector of booleans.",11,null],[11,"clone","qrcode","",12,null],[11,"new","","Constructs a new QR code which automatically encodes the given data.",12,{"inputs":[{"name":"d"}],"output":{"name":"qrresult"}}],[11,"with_error_correction_level","","Constructs a new QR code which automatically encodes the given data at a\nspecific error correction level.",12,{"inputs":[{"name":"d"},{"name":"eclevel"}],"output":{"name":"qrresult"}}],[11,"with_version","","Constructs a new QR code for the given version and error correction\nlevel.",12,{"inputs":[{"name":"d"},{"name":"version"},{"name":"eclevel"}],"output":{"name":"qrresult"}}],[11,"with_bits","","Constructs a new QR code with encoded bits.",12,{"inputs":[{"name":"bits"},{"name":"eclevel"}],"output":{"name":"qrresult"}}],[11,"version","","Gets the version of this QR code.",12,null],[11,"error_correction_level","","Gets the error correction level of this QR code.",12,null],[11,"width","","Gets the number of modules per side, i.e. the width of this QR code.",12,null],[11,"max_allowed_errors","","Gets the maximum number of allowed erratic modules can be introduced\nbefore the data becomes corrupted. Note that errors should not be\nintroduced to functional modules.",12,null],[11,"is_functional","","Checks whether a module at coordinate (x, y) is a functional module or\nnot.",12,null],[11,"to_debug_str","","Converts the QR code into a human-readable string. This is mainly for\ndebugging only.",12,null],[11,"to_vec","","Converts the QR code to a vector of booleans. Each entry represents the\ncolor of the module, with &quot;true&quot; means dark and &quot;false&quot; means light.",12,null],[11,"into_vec","","Converts the QR code to a vector of booleans. Each entry represents the\ncolor of the module, with &quot;true&quot; means dark and &quot;false&quot; means light.",12,null],[11,"index","","",12,null]],"paths":[[4,"QrError"],[4,"EcLevel"],[4,"Version"],[4,"Mode"],[4,"ExtendedMode"],[3,"Bits"],[3,"Segment"],[3,"Parser"],[3,"Optimizer"],[4,"Module"],[4,"MaskPattern"],[3,"Canvas"],[3,"QrCode"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[5,"zero","num","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).",null,null],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`&#39;s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,null],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,null],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,null],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,null],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,null],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,null],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,null],[11,"hash","","",5,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,null],[11,"eq","","",5,null],[11,"partial_cmp","","",5,null],[11,"cmp","","",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,null],[11,"bitand","","",5,null],[11,"bitor","","",5,null],[11,"bitor","","",5,null],[11,"bitxor","","",5,null],[11,"bitxor","","",5,null],[11,"shl","","",5,null],[11,"shr","","",5,null],[11,"zero","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",5,null],[11,"one","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",5,null],[11,"add","","",5,null],[11,"sub","","",5,null],[11,"sub","","",5,null],[11,"mul","","",5,null],[11,"mul","","",5,null],[11,"div","","",5,null],[11,"div","","",5,null],[11,"rem","","",5,null],[11,"rem","","",5,null],[11,"neg","","",5,null],[11,"checked_add","","",5,null],[11,"checked_sub","","",5,null],[11,"checked_mul","","",5,null],[11,"checked_div","","",5,null],[11,"div_rem","","",5,null],[11,"div_floor","","",5,null],[11,"mod_floor","","",5,null],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,null],[11,"to_i64","","",5,null],[11,"to_u64","","",5,null],[11,"to_f32","","",5,null],[11,"to_f64","","",5,null],[11,"from_i64","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",5,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",6,null],[11,"to_biguint","","",5,null],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",5,null],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"eq","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,null],[11,"neg","","Negate Sign value.",0,null],[11,"mul","","",0,null],[11,"hash","","",6,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,null],[11,"eq","","",6,null],[11,"partial_cmp","","",6,null],[11,"cmp","","",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,null],[11,"shr","","",6,null],[11,"zero","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",6,null],[11,"one","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",6,null],[11,"abs_sub","","",6,null],[11,"signum","","",6,null],[11,"is_positive","","",6,null],[11,"is_negative","","",6,null],[11,"add","","",6,null],[11,"add","","",6,null],[11,"sub","","",6,null],[11,"sub","","",6,null],[11,"mul","","",6,null],[11,"mul","","",6,null],[11,"div","","",6,null],[11,"div","","",6,null],[11,"rem","","",6,null],[11,"rem","","",6,null],[11,"neg","","",6,null],[11,"checked_add","","",6,null],[11,"checked_sub","","",6,null],[11,"checked_mul","","",6,null],[11,"checked_div","","",6,null],[11,"div_rem","","",6,null],[11,"div_floor","","",6,null],[11,"mod_floor","","",6,null],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,null],[11,"to_i64","","",6,null],[11,"to_u64","","",6,null],[11,"to_f32","","",6,null],[11,"to_f64","","",6,null],[11,"from_i64","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",6,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",6,null],[11,"to_bigint","","",5,null],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",6,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",6,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",6,null],[11,"checked_add","","",6,null],[11,"checked_sub","","",6,null],[11,"checked_mul","","",6,null],[11,"checked_div","","",6,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null],[11,"from","","",1,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[0,"complex","num","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",7,null],[12,"im","","Imaginary portion of the complex number",7,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",7,null],[11,"hash","","",7,null],[11,"clone","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"decode","","",7,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",7,null],[11,"new","","Create a new Complex",7,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",7,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",7,null],[11,"scale","","Multiplies `self` by the scalar `t`.",7,null],[11,"unscale","","Divides `self` by the scalar `t`.",7,null],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",7,null],[11,"inv","","Returns `1/self`",7,null],[11,"norm","","Calculate |self|",7,null],[11,"arg","","Calculate the principal Arg of self.",7,null],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",7,null],[11,"from_polar","","Convert a polar representation into a complex number.",7,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",7,null],[11,"ln","","Computes the principal value of natural logarithm of `self`.",7,null],[11,"sqrt","","Computes the principal value of the square root of `self`.",7,null],[11,"sin","","Computes the sine of `self`.",7,null],[11,"cos","","Computes the cosine of `self`.",7,null],[11,"tan","","Computes the tangent of `self`.",7,null],[11,"asin","","Computes the principal value of the inverse sine of `self`.",7,null],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",7,null],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",7,null],[11,"sinh","","Computes the hyperbolic sine of `self`.",7,null],[11,"cosh","","Computes the hyperbolic cosine of `self`.",7,null],[11,"tanh","","Computes the hyperbolic tangent of `self`.",7,null],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",7,null],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",7,null],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",7,null],[11,"is_nan","","Checks if the given complex number is NaN",7,null],[11,"is_infinite","","Checks if the given complex number is infinite",7,null],[11,"is_finite","","Checks if the given complex number is finite",7,null],[11,"is_normal","","Checks if the given complex number is normal",7,null],[11,"from","","",7,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",7,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,null],[11,"add","","",7,null],[11,"sub","","",7,null],[11,"sub","","",7,null],[11,"mul","","",7,null],[11,"mul","","",7,null],[11,"div","","",7,null],[11,"div","","",7,null],[11,"neg","","",7,null],[11,"add","","",7,null],[11,"sub","","",7,null],[11,"mul","","",7,null],[11,"div","","",7,null],[11,"add","","",7,null],[11,"sub","","",7,null],[11,"mul","","",7,null],[11,"div","","",7,null],[11,"zero","","",7,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",7,null],[11,"one","","",7,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",7,null],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",8,null],[10,"mod_floor","","Floored integer modulo, satisfying:",8,null],[10,"gcd","","Greatest Common Divisor (GCD).",8,null],[10,"lcm","","Lowest Common Multiple (LCM).",8,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",8,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",8,null],[10,"is_even","","Returns `true` if the number is even.",8,null],[10,"is_odd","","Returns `true` if the number is odd.",8,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",9,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"next_back","","",9,null],[11,"clone","","",10,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"clone","","",11,null],[11,"next","","",11,null],[11,"clone","","",12,null],[11,"next","","",12,null],[0,"traits","num","Numeric traits for generic mathematics",null,null],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",13,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",14,null],[13,"Invalid","","",14,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","Parse error for `from_str_radix`",15,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",15,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",16,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",16,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",17,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",18,null],[10,"abs_sub","","The positive difference of two numbers.",18,null],[10,"signum","","Returns the sign of the number.",18,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",18,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",18,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",19,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",19,{"inputs":[],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",20,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",20,null],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",21,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",22,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",23,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",24,null],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",25,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",25,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",25,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",25,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",25,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",25,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",25,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",25,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",25,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",25,null],[10,"swap_bytes","","Reverses the byte order of the integer.",25,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",25,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",25,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",25,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",26,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",26,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",26,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",26,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",26,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",26,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",26,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",26,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",26,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",26,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",26,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",26,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",28,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",29,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",29,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",29,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",29,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",29,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",29,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",29,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",29,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",29,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",29,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",29,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",29,null],[10,"floor","","Returns the largest integer less than or equal to a number.",29,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",29,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",29,null],[10,"trunc","","Return the integer part of a number.",29,null],[10,"fract","","Returns the fractional part of a number.",29,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",29,null],[10,"signum","","Returns a number that represents the sign of `self`.",29,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",29,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",29,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",29,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",29,null],[10,"powi","","Raise a number to an integer power.",29,null],[10,"powf","","Raise a number to a floating point power.",29,null],[10,"sqrt","","Take the square root of a number.",29,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",29,null],[10,"exp2","","Returns `2^(self)`.",29,null],[10,"ln","","Returns the natural logarithm of the number.",29,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",29,null],[10,"log2","","Returns the base 2 logarithm of the number.",29,null],[10,"log10","","Returns the base 10 logarithm of the number.",29,null],[10,"max","","Returns the maximum of the two numbers.",29,null],[10,"min","","Returns the minimum of the two numbers.",29,null],[10,"abs_sub","","The positive difference of two numbers.",29,null],[10,"cbrt","","Take the cubic root of a number.",29,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",29,null],[10,"sin","","Computes the sine of a number (in radians).",29,null],[10,"cos","","Computes the cosine of a number (in radians).",29,null],[10,"tan","","Computes the tangent of a number (in radians).",29,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",29,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",29,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",29,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",29,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",29,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",29,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",29,null],[10,"sinh","","Hyperbolic sine function.",29,null],[10,"cosh","","Hyperbolic cosine function.",29,null],[10,"tanh","","Hyperbolic tangent function.",29,null],[10,"asinh","","Inverse hyperbolic sine function.",29,null],[10,"acosh","","Inverse hyperbolic cosine function.",29,null],[10,"atanh","","Inverse hyperbolic tangent function.",29,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",29,null],[11,"fmt","","",13,null],[11,"fmt","","",14,null],[0,"rational","num","Rational numbers",null,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",30,null],[11,"hash","","",30,null],[11,"clone","","",30,null],[11,"decode","","",30,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",30,null],[11,"from_integer","","Creates a ratio representing the integer `t`.",30,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",30,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",30,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",30,null],[11,"numer","","Gets an immutable reference to the numerator.",30,null],[11,"denom","","Gets an immutable reference to the denominator.",30,null],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",30,null],[11,"reduced","","Returns a `reduce`d copy of self.",30,null],[11,"recip","","Returns the reciprocal.",30,null],[11,"floor","","Rounds towards minus infinity.",30,null],[11,"ceil","","Rounds towards plus infinity.",30,null],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",30,null],[11,"trunc","","Rounds towards zero.",30,null],[11,"fract","","Returns the fractional part of a number.",30,null],[11,"pow","","Raises the ratio to the power of an exponent",30,null],[11,"from_float","","Converts a float into a rational number.",30,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"lt","","",30,null],[11,"gt","","",30,null],[11,"le","","",30,null],[11,"ge","","",30,null],[11,"partial_cmp","","",30,null],[11,"cmp","","",30,null],[11,"mul","","",30,null],[11,"mul","","",30,null],[11,"div","","",30,null],[11,"div","","",30,null],[11,"add","","",30,null],[11,"add","","",30,null],[11,"sub","","",30,null],[11,"sub","","",30,null],[11,"rem","","",30,null],[11,"rem","","",30,null],[11,"neg","","",30,null],[11,"zero","","",30,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",30,null],[11,"one","","",30,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",30,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",30,null],[11,"abs_sub","","",30,null],[11,"signum","","",30,null],[11,"is_positive","","",30,null],[11,"is_negative","","",30,null],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",30,null],[11,"from_str","","Parses `numer/denom` or just `numer`.",30,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"fmt","","",31,null],[11,"description","","",31,null]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,null],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,null],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,null],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,null],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,null],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,null],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,null],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,null],[11,"encode","","",8,null],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,null],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,null],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,null],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,null],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,null],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,null],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,null],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,null],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,null],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,null],[11,"fmt","","",19,null],[11,"clone","","",19,null],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"fmt","","",18,null],[11,"clone","","",18,null],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"description","","",21,null],[11,"fmt","","",21,null],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,null],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,null],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"description","","",24,null],[11,"fmt","","",24,null],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,null],[11,"fmt","","",27,null],[11,"partial_cmp","","",27,null],[11,"lt","","",27,null],[11,"le","","",27,null],[11,"gt","","",27,null],[11,"ge","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"clone","","",27,null],[11,"eq","","",28,null],[11,"clone","","",28,null],[11,"fmt","","",29,null],[11,"eq","","",29,null],[11,"fmt","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"fmt","","",28,null],[11,"description","","",30,null],[11,"cause","","",30,null],[11,"fmt","","",30,null],[11,"from","","",30,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,null],[11,"fmt","","",29,null],[11,"from","","",29,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,null],[11,"fmt","","",31,null],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,null],[11,"emit_nil","","",35,null],[11,"emit_usize","","",35,null],[11,"emit_u64","","",35,null],[11,"emit_u32","","",35,null],[11,"emit_u16","","",35,null],[11,"emit_u8","","",35,null],[11,"emit_isize","","",35,null],[11,"emit_i64","","",35,null],[11,"emit_i32","","",35,null],[11,"emit_i16","","",35,null],[11,"emit_i8","","",35,null],[11,"emit_bool","","",35,null],[11,"emit_f64","","",35,null],[11,"emit_f32","","",35,null],[11,"emit_char","","",35,null],[11,"emit_str","","",35,null],[11,"emit_enum","","",35,null],[11,"emit_enum_variant","","",35,null],[11,"emit_enum_variant_arg","","",35,null],[11,"emit_enum_struct_variant","","",35,null],[11,"emit_enum_struct_variant_field","","",35,null],[11,"emit_struct","","",35,null],[11,"emit_struct_field","","",35,null],[11,"emit_tuple","","",35,null],[11,"emit_tuple_arg","","",35,null],[11,"emit_tuple_struct","","",35,null],[11,"emit_tuple_struct_arg","","",35,null],[11,"emit_option","","",35,null],[11,"emit_option_none","","",35,null],[11,"emit_option_some","","",35,null],[11,"emit_seq","","",35,null],[11,"emit_seq_elt","","",35,null],[11,"emit_map","","",35,null],[11,"emit_map_elt_key","","",35,null],[11,"emit_map_elt_val","","",35,null],[11,"encode","","",27,null],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,null],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,null],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,null],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,null],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,null],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,null],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,null],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,null],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,null],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,null],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,null],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,null],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,null],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,null],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,null],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,null],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,null],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,null],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,null],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,null],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,null],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,null],[11,"index","","",27,null],[11,"index","","",27,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"new","","",36,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,null],[11,"is_empty","","Returns true if the stack is empty.",36,null],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,null],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,null],[11,"next","","",37,null],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,null],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,null],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,null],[11,"read_usize","","",39,null],[11,"read_u8","","",39,null],[11,"read_u16","","",39,null],[11,"read_u32","","",39,null],[11,"read_u64","","",39,null],[11,"read_isize","","",39,null],[11,"read_i8","","",39,null],[11,"read_i16","","",39,null],[11,"read_i32","","",39,null],[11,"read_i64","","",39,null],[11,"read_f32","","",39,null],[11,"read_f64","","",39,null],[11,"read_bool","","",39,null],[11,"read_char","","",39,null],[11,"read_str","","",39,null],[11,"read_enum","","",39,null],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,null],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,null],[11,"read_struct","","",39,null],[11,"read_struct_field","","",39,null],[11,"read_tuple","","",39,null],[11,"read_tuple_arg","","",39,null],[11,"read_tuple_struct","","",39,null],[11,"read_tuple_struct_arg","","",39,null],[11,"read_option","","",39,null],[11,"read_seq","","",39,null],[11,"read_seq_elt","","",39,null],[11,"read_map","","",39,null],[11,"read_map_elt_key","","",39,null],[11,"read_map_elt_val","","",39,null],[11,"error","","",39,null],[11,"to_json","","",27,null],[11,"to_json","collections::string","",0,null],[11,"to_json","collections::vec","",4,null],[11,"to_json","collections::btree::map","",14,null],[11,"to_json","std::collections::hash::map","",16,null],[11,"to_json","core::option","",5,null],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,null],[11,"fmt","","Encodes a json value into a string",40,null],[11,"fmt","","Encodes a json value into a string",41,null],[11,"indent","","Set the indentation level for the emitted JSON",42,null],[11,"fmt","","Encodes a json value into a string",42,null],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,null],[10,"read_usize","","",43,null],[10,"read_u64","","",43,null],[10,"read_u32","","",43,null],[10,"read_u16","","",43,null],[10,"read_u8","","",43,null],[10,"read_isize","","",43,null],[10,"read_i64","","",43,null],[10,"read_i32","","",43,null],[10,"read_i16","","",43,null],[10,"read_i8","","",43,null],[10,"read_bool","","",43,null],[10,"read_f64","","",43,null],[10,"read_f32","","",43,null],[10,"read_char","","",43,null],[10,"read_str","","",43,null],[10,"read_enum","","",43,null],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,null],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,null],[10,"read_struct","","",43,null],[10,"read_struct_field","","",43,null],[10,"read_tuple","","",43,null],[10,"read_tuple_arg","","",43,null],[10,"read_tuple_struct","","",43,null],[10,"read_tuple_struct_arg","","",43,null],[10,"read_option","","",43,null],[10,"read_seq","","",43,null],[10,"read_seq_elt","","",43,null],[10,"read_map","","",43,null],[10,"read_map_elt_key","","",43,null],[10,"read_map_elt_val","","",43,null],[10,"error","","",43,null],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,null],[10,"emit_usize","","",44,null],[10,"emit_u64","","",44,null],[10,"emit_u32","","",44,null],[10,"emit_u16","","",44,null],[10,"emit_u8","","",44,null],[10,"emit_isize","","",44,null],[10,"emit_i64","","",44,null],[10,"emit_i32","","",44,null],[10,"emit_i16","","",44,null],[10,"emit_i8","","",44,null],[10,"emit_bool","","",44,null],[10,"emit_f64","","",44,null],[10,"emit_f32","","",44,null],[10,"emit_char","","",44,null],[10,"emit_str","","",44,null],[10,"emit_enum","","",44,null],[10,"emit_enum_variant","","",44,null],[10,"emit_enum_variant_arg","","",44,null],[10,"emit_enum_struct_variant","","",44,null],[10,"emit_enum_struct_variant_field","","",44,null],[10,"emit_struct","","",44,null],[10,"emit_struct_field","","",44,null],[10,"emit_tuple","","",44,null],[10,"emit_tuple_arg","","",44,null],[10,"emit_tuple_struct","","",44,null],[10,"emit_tuple_struct_arg","","",44,null],[10,"emit_option","","",44,null],[10,"emit_option_none","","",44,null],[10,"emit_option_some","","",44,null],[10,"emit_seq","","",44,null],[10,"emit_seq_elt","","",44,null],[10,"emit_map","","",44,null],[10,"emit_map_elt_key","","",44,null],[10,"emit_map_elt_val","","",44,null],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,null],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,null],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,null],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,null],[11,"ind_sample","","",4,null],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",5,null],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,null],[11,"ind_sample","","",5,null],[11,"clone","","",6,null],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,null],[11,"ind_sample","","",6,null],[11,"clone","","",7,null],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,null],[11,"ind_sample","","",7,null],[11,"clone","","",8,null],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,null],[11,"ind_sample","","",8,null],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,null],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,null],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,null],[11,"ind_sample","","",10,null],[11,"clone","","",11,null],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,null],[11,"ind_sample","","",11,null],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,null],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,null],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,null],[11,"ind_sample","","",13,null],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",14,null],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,null],[11,"clone","","",16,null],[11,"sample","","",16,null],[11,"ind_sample","","",16,null],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,null],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,null],[11,"ind_sample","","",17,null],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,null],[11,"next_u32","","",18,null],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,null],[11,"next_u32","","",19,null],[11,"next_u64","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,null],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",20,null],[11,"next_u32","","",20,null],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,null],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",21,null],[11,"next_u32","","",21,null],[11,"next_u64","","",21,null],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,null],[11,"reseed","","",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",25,null],[11,"next_u64","","",25,null],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,null],[11,"next_u64","","",26,null],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,null],[11,"next_u64","","Return the next random u64.",28,null],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,null],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,null],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,null],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,null],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,null],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,null],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,null],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,null],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,null],[11,"next_u64","","",30,null],[11,"next_f32","","",30,null],[11,"next_f64","","",30,null],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,null],[11,"next","","",32,null],[11,"clone","","",33,null],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,null],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,null],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",34,null],[11,"next_u64","","",34,null],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,null],[11,"next_u32","","",35,null],[11,"next_u64","","",35,null],[11,"fill_bytes","","",35,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",12,null],[12,"sa_family","","",12,null],[12,"sa_data","","",12,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",13,null],[12,"sin6_family","","",13,null],[12,"sin6_port","","",13,null],[12,"sin6_flowinfo","","",13,null],[12,"sin6_addr","","",13,null],[12,"sin6_scope_id","","",13,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",14,null],[12,"sun_family","","",14,null],[12,"sun_path","","",14,null],[3,"passwd","","",null,null],[12,"pw_name","","",15,null],[12,"pw_passwd","","",15,null],[12,"pw_uid","","",15,null],[12,"pw_gid","","",15,null],[12,"pw_change","","",15,null],[12,"pw_class","","",15,null],[12,"pw_gecos","","",15,null],[12,"pw_dir","","",15,null],[12,"pw_shell","","",15,null],[12,"pw_expire","","",15,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",16,null],[12,"ifa_name","","",16,null],[12,"ifa_flags","","",16,null],[12,"ifa_addr","","",16,null],[12,"ifa_netmask","","",16,null],[12,"ifa_dstaddr","","",16,null],[12,"ifa_data","","",16,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",17,null],[12,"tm_min","","",17,null],[12,"tm_hour","","",17,null],[12,"tm_mday","","",17,null],[12,"tm_mon","","",17,null],[12,"tm_year","","",17,null],[12,"tm_wday","","",17,null],[12,"tm_yday","","",17,null],[12,"tm_isdst","","",17,null],[12,"tm_gmtoff","","",17,null],[12,"tm_zone","","",17,null],[3,"utsname","","",null,null],[12,"sysname","","",18,null],[12,"nodename","","",18,null],[12,"release","","",18,null],[12,"version","","",18,null],[12,"machine","","",18,null],[3,"msghdr","","",null,null],[12,"msg_name","","",19,null],[12,"msg_namelen","","",19,null],[12,"msg_iov","","",19,null],[12,"msg_iovlen","","",19,null],[12,"msg_control","","",19,null],[12,"msg_controllen","","",19,null],[12,"msg_flags","","",19,null],[3,"fsid_t","","",null,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",20,null],[12,"gl_offs","","",20,null],[12,"gl_pathv","","",20,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",21,null],[12,"ss_family","","",21,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",22,null],[12,"ai_family","","",22,null],[12,"ai_socktype","","",22,null],[12,"ai_protocol","","",22,null],[12,"ai_addrlen","","",22,null],[12,"ai_canonname","","",22,null],[12,"ai_addr","","",22,null],[12,"ai_next","","",22,null],[3,"mach_timebase_info","","",null,null],[12,"numer","","",23,null],[12,"denom","","",23,null],[3,"stat","","",null,null],[12,"st_dev","","",24,null],[12,"st_mode","","",24,null],[12,"st_nlink","","",24,null],[12,"st_ino","","",24,null],[12,"st_uid","","",24,null],[12,"st_gid","","",24,null],[12,"st_rdev","","",24,null],[12,"st_atime","","",24,null],[12,"st_atime_nsec","","",24,null],[12,"st_mtime","","",24,null],[12,"st_mtime_nsec","","",24,null],[12,"st_ctime","","",24,null],[12,"st_ctime_nsec","","",24,null],[12,"st_birthtime","","",24,null],[12,"st_birthtime_nsec","","",24,null],[12,"st_size","","",24,null],[12,"st_blocks","","",24,null],[12,"st_blksize","","",24,null],[12,"st_flags","","",24,null],[12,"st_gen","","",24,null],[12,"st_lspare","","",24,null],[12,"st_qspare","","",24,null],[3,"dirent","","",null,null],[12,"d_ino","","",25,null],[12,"d_seekoff","","",25,null],[12,"d_reclen","","",25,null],[12,"d_namlen","","",25,null],[12,"d_type","","",25,null],[12,"d_name","","",25,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",26,null],[12,"si_errno","","",26,null],[12,"si_code","","",26,null],[12,"si_pid","","",26,null],[12,"si_uid","","",26,null],[12,"si_status","","",26,null],[12,"si_addr","","",26,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",27,null],[12,"sa_mask","","",27,null],[12,"sa_flags","","",27,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",28,null],[12,"ss_size","","",28,null],[12,"ss_flags","","",28,null],[3,"fstore_t","","",null,null],[12,"fst_flags","","",29,null],[12,"fst_posmode","","",29,null],[12,"fst_offset","","",29,null],[12,"fst_length","","",29,null],[12,"fst_bytesalloc","","",29,null],[3,"radvisory","","",null,null],[12,"ra_offset","","",30,null],[12,"ra_count","","",30,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",31,null],[12,"f_frsize","","",31,null],[12,"f_blocks","","",31,null],[12,"f_bfree","","",31,null],[12,"f_bavail","","",31,null],[12,"f_files","","",31,null],[12,"f_ffree","","",31,null],[12,"f_favail","","",31,null],[12,"f_fsid","","",31,null],[12,"f_flag","","",31,null],[12,"f_namemax","","",31,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",32,null],[12,"dli_fbase","","",32,null],[12,"dli_sname","","",32,null],[12,"dli_saddr","","",32,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",33,null],[12,"sin_family","","",33,null],[12,"sin_port","","",33,null],[12,"sin_addr","","",33,null],[12,"sin_zero","","",33,null],[3,"statfs","","",null,null],[12,"f_bsize","","",34,null],[12,"f_iosize","","",34,null],[12,"f_blocks","","",34,null],[12,"f_bfree","","",34,null],[12,"f_bavail","","",34,null],[12,"f_files","","",34,null],[12,"f_ffree","","",34,null],[12,"f_fsid","","",34,null],[12,"f_owner","","",34,null],[12,"f_type","","",34,null],[12,"f_flags","","",34,null],[12,"f_fssubtype","","",34,null],[12,"f_fstypename","","",34,null],[12,"f_mntonname","","",34,null],[12,"f_mntfromname","","",34,null],[12,"f_reserved","","",34,null],[3,"kevent","","",null,null],[12,"ident","","",35,null],[12,"filter","","",35,null],[12,"flags","","",35,null],[12,"fflags","","",35,null],[12,"data","","",35,null],[12,"udata","","",35,null],[3,"kevent64_s","","",null,null],[12,"ident","","",36,null],[12,"filter","","",36,null],[12,"flags","","",36,null],[12,"fflags","","",36,null],[12,"data","","",36,null],[12,"udata","","",36,null],[12,"ext","","",36,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",37,null],[12,"dqb_bsoftlimit","","",37,null],[12,"dqb_curbytes","","",37,null],[12,"dqb_ihardlimit","","",37,null],[12,"dqb_isoftlimit","","",37,null],[12,"dqb_curinodes","","",37,null],[12,"dqb_btime","","",37,null],[12,"dqb_itime","","",37,null],[12,"dqb_id","","",37,null],[12,"dqb_spare","","",37,null],[3,"termios","","",null,null],[12,"c_iflag","","",38,null],[12,"c_oflag","","",38,null],[12,"c_cflag","","",38,null],[12,"c_lflag","","",38,null],[12,"c_cc","","",38,null],[12,"c_ispeed","","",38,null],[12,"c_ospeed","","",38,null],[3,"flock","","",null,null],[12,"l_start","","",39,null],[12,"l_len","","",39,null],[12,"l_pid","","",39,null],[12,"l_type","","",39,null],[12,"l_whence","","",39,null],[3,"sf_hdtr","","",null,null],[12,"headers","","",40,null],[12,"hdr_cnt","","",40,null],[12,"trailers","","",40,null],[12,"trl_cnt","","",40,null],[3,"pthread_attr_t","","",null,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"select","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"setgroups","","",null,null],[5,"ioctl","","",null,null],[5,"kqueue","","",null,null],[5,"unmount","","",null,null],[5,"syscall","","",null,null],[5,"getpwuid_r","","",null,null],[5,"getnameinfo","","",null,null],[5,"mincore","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"mprotect","","",null,null],[5,"shm_open","","",null,null],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"mach_absolute_time","","",null,null],[5,"mach_timebase_info","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"pthread_get_stackaddr_np","","",null,null],[5,"pthread_get_stacksize_np","","",null,null],[5,"__error","","",null,null],[5,"backtrace","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"kevent","","",null,null],[5,"kevent64","","",null,null],[5,"mount","","",null,null],[5,"ptrace","","",null,null],[5,"quotactl","","",null,null],[5,"sethostname","","",null,null],[5,"sendfile","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",41,null],[11,"is_none","","Returns `true` if the option is a `None` value",41,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",41,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",41,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",41,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",41,null],[11,"unwrap_or","","Returns the contained value or a default.",41,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",41,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",41,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",41,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",41,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",41,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",41,null],[11,"iter","","Returns an iterator over the possibly contained value.",41,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",41,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",41,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",41,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",41,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",41,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",41,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",41,null],[11,"unwrap_or_default","","Returns the contained value or a default",41,null],[11,"hash","core::num","",42,null],[11,"default","","",42,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",42,null],[11,"cmp","","",42,null],[11,"partial_cmp","","",42,null],[11,"lt","","",42,null],[11,"le","","",42,null],[11,"gt","","",42,null],[11,"ge","","",42,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"fmt","","",42,null],[11,"fmt","","",42,null],[11,"shl","","",42,null],[11,"shl_assign","","",42,null],[11,"shr","","",42,null],[11,"shr_assign","","",42,null],[11,"shl","","",42,null],[11,"shl_assign","","",42,null],[11,"shr","","",42,null],[11,"shr_assign","","",42,null],[11,"shl","","",42,null],[11,"shl_assign","","",42,null],[11,"shr","","",42,null],[11,"shr_assign","","",42,null],[11,"shl","","",42,null],[11,"shl_assign","","",42,null],[11,"shr","","",42,null],[11,"shr_assign","","",42,null],[11,"shl","","",42,null],[11,"shl_assign","","",42,null],[11,"shr","","",42,null],[11,"shr_assign","","",42,null],[11,"shl","","",42,null],[11,"shl_assign","","",42,null],[11,"shr","","",42,null],[11,"shr_assign","","",42,null],[11,"shl","","",42,null],[11,"shl_assign","","",42,null],[11,"shr","","",42,null],[11,"shr_assign","","",42,null],[11,"shl","","",42,null],[11,"shl_assign","","",42,null],[11,"shr","","",42,null],[11,"shr_assign","","",42,null],[11,"shl","","",42,null],[11,"shl_assign","","",42,null],[11,"shr","","",42,null],[11,"shr_assign","","",42,null],[11,"shl","","",42,null],[11,"shl_assign","","",42,null],[11,"shr","","",42,null],[11,"shr_assign","","",42,null],[11,"add","","",42,null],[11,"add_assign","","",42,null],[11,"sub","","",42,null],[11,"sub_assign","","",42,null],[11,"mul","","",42,null],[11,"mul_assign","","",42,null],[11,"div","","",42,null],[11,"div_assign","","",42,null],[11,"rem","","",42,null],[11,"rem_assign","","",42,null],[11,"not","","",42,null],[11,"bitxor","","",42,null],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,null],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,null],[11,"bitand_assign","","",42,null],[11,"neg","","",42,null],[11,"add","","",42,null],[11,"add_assign","","",42,null],[11,"sub","","",42,null],[11,"sub_assign","","",42,null],[11,"mul","","",42,null],[11,"mul_assign","","",42,null],[11,"div","","",42,null],[11,"div_assign","","",42,null],[11,"rem","","",42,null],[11,"rem_assign","","",42,null],[11,"not","","",42,null],[11,"bitxor","","",42,null],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,null],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,null],[11,"bitand_assign","","",42,null],[11,"neg","","",42,null],[11,"add","","",42,null],[11,"add_assign","","",42,null],[11,"sub","","",42,null],[11,"sub_assign","","",42,null],[11,"mul","","",42,null],[11,"mul_assign","","",42,null],[11,"div","","",42,null],[11,"div_assign","","",42,null],[11,"rem","","",42,null],[11,"rem_assign","","",42,null],[11,"not","","",42,null],[11,"bitxor","","",42,null],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,null],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,null],[11,"bitand_assign","","",42,null],[11,"neg","","",42,null],[11,"add","","",42,null],[11,"add_assign","","",42,null],[11,"sub","","",42,null],[11,"sub_assign","","",42,null],[11,"mul","","",42,null],[11,"mul_assign","","",42,null],[11,"div","","",42,null],[11,"div_assign","","",42,null],[11,"rem","","",42,null],[11,"rem_assign","","",42,null],[11,"not","","",42,null],[11,"bitxor","","",42,null],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,null],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,null],[11,"bitand_assign","","",42,null],[11,"neg","","",42,null],[11,"add","","",42,null],[11,"add_assign","","",42,null],[11,"sub","","",42,null],[11,"sub_assign","","",42,null],[11,"mul","","",42,null],[11,"mul_assign","","",42,null],[11,"div","","",42,null],[11,"div_assign","","",42,null],[11,"rem","","",42,null],[11,"rem_assign","","",42,null],[11,"not","","",42,null],[11,"bitxor","","",42,null],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,null],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,null],[11,"bitand_assign","","",42,null],[11,"neg","","",42,null],[11,"add","","",42,null],[11,"add_assign","","",42,null],[11,"sub","","",42,null],[11,"sub_assign","","",42,null],[11,"mul","","",42,null],[11,"mul_assign","","",42,null],[11,"div","","",42,null],[11,"div_assign","","",42,null],[11,"rem","","",42,null],[11,"rem_assign","","",42,null],[11,"not","","",42,null],[11,"bitxor","","",42,null],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,null],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,null],[11,"bitand_assign","","",42,null],[11,"neg","","",42,null],[11,"add","","",42,null],[11,"add_assign","","",42,null],[11,"sub","","",42,null],[11,"sub_assign","","",42,null],[11,"mul","","",42,null],[11,"mul_assign","","",42,null],[11,"div","","",42,null],[11,"div_assign","","",42,null],[11,"rem","","",42,null],[11,"rem_assign","","",42,null],[11,"not","","",42,null],[11,"bitxor","","",42,null],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,null],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,null],[11,"bitand_assign","","",42,null],[11,"neg","","",42,null],[11,"add","","",42,null],[11,"add_assign","","",42,null],[11,"sub","","",42,null],[11,"sub_assign","","",42,null],[11,"mul","","",42,null],[11,"mul_assign","","",42,null],[11,"div","","",42,null],[11,"div_assign","","",42,null],[11,"rem","","",42,null],[11,"rem_assign","","",42,null],[11,"not","","",42,null],[11,"bitxor","","",42,null],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,null],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,null],[11,"bitand_assign","","",42,null],[11,"neg","","",42,null],[11,"add","","",42,null],[11,"add_assign","","",42,null],[11,"sub","","",42,null],[11,"sub_assign","","",42,null],[11,"mul","","",42,null],[11,"mul_assign","","",42,null],[11,"div","","",42,null],[11,"div_assign","","",42,null],[11,"rem","","",42,null],[11,"rem_assign","","",42,null],[11,"not","","",42,null],[11,"bitxor","","",42,null],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,null],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,null],[11,"bitand_assign","","",42,null],[11,"neg","","",42,null],[11,"add","","",42,null],[11,"add_assign","","",42,null],[11,"sub","","",42,null],[11,"sub_assign","","",42,null],[11,"mul","","",42,null],[11,"mul_assign","","",42,null],[11,"div","","",42,null],[11,"div_assign","","",42,null],[11,"rem","","",42,null],[11,"rem_assign","","",42,null],[11,"not","","",42,null],[11,"bitxor","","",42,null],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,null],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,null],[11,"bitand_assign","","",42,null],[11,"neg","","",42,null],[11,"eq","core::num::dec2flt","",43,null],[11,"ne","","",43,null],[11,"clone","","",43,null],[11,"fmt","","",43,null],[11,"fmt","","",43,null],[11,"fmt","core::num","",44,null],[11,"eq","","",44,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"fmt","","",45,null],[11,"fmt","","",45,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"clone","","",46,null],[11,"fmt","","",46,null],[11,"fmt","","",46,null],[11,"hash","core::nonzero","",47,null],[11,"fmt","","",47,null],[11,"partial_cmp","","",47,null],[11,"lt","","",47,null],[11,"le","","",47,null],[11,"gt","","",47,null],[11,"ge","","",47,null],[11,"cmp","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"clone","","",47,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",47,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",47,null],[11,"new","core::ptr","Creates a new `Unique`.",48,null],[11,"get","","Dereferences the content.",48,null],[11,"get_mut","","Mutably dereferences the content.",48,null],[11,"deref","","",48,null],[11,"fmt","","",48,null],[11,"new","","Creates a new `Shared`.",49,null],[11,"clone","","",49,null],[11,"deref","","",49,null],[11,"fmt","","",49,null],[11,"hash","core::marker","",50,null],[11,"eq","","",50,null],[11,"partial_cmp","","",50,null],[11,"cmp","","",50,null],[11,"clone","","",50,null],[11,"default","","",50,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",51,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"eq","","",52,null],[11,"ne","","",52,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"contains","","# Examples",52,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"clone","","",53,null],[11,"fmt","","",53,null],[11,"contains","","# Examples",53,null],[11,"eq","","",54,null],[11,"ne","","",54,null],[11,"clone","","",54,null],[11,"fmt","","",54,null],[11,"contains","","# Examples",54,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"from","","",55,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",55,null],[11,"eq","","",56,null],[11,"ne","","",56,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"contains","","# Examples",56,null],[11,"hash","core::cmp","",57,null],[11,"fmt","","",57,null],[11,"eq","","",57,null],[11,"clone","","",57,null],[11,"reverse","","Reverse the `Ordering`.",57,null],[11,"cmp","","",57,null],[11,"partial_cmp","","",57,null],[11,"fmt","libc","",58,null],[11,"fmt","","",58,null],[11,"is","","Returns true if the boxed type is the same as `T`",58,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",58,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",58,null],[11,"is","","Forwards to the method defined on the type `Any`.",58,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",58,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",58,null],[11,"hash","core::any","",59,null],[11,"fmt","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"clone","","",59,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",59,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",60,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",62,null],[11,"clone","","",62,null],[11,"new","","Creates a new `AtomicBool`.",60,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",60,null],[11,"store","","Stores a value into the bool.",60,null],[11,"swap","","Stores a value into the bool, returning the old value.",60,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",60,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",60,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",60,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",60,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",60,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",60,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",60,null],[11,"new","","Creates a new `AtomicPtr`.",61,null],[11,"load","","Loads a value from the pointer.",61,null],[11,"store","","Stores a value into the pointer.",61,null],[11,"swap","","Stores a value into the pointer, returning the old value.",61,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",61,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",61,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",61,null],[11,"default","","",63,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",63,null],[11,"new","","Creates a new atomic integer.",63,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",63,null],[11,"store","","Stores a value into the atomic integer.",63,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",63,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",63,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",63,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",63,null],[11,"fetch_add","","Add to the current value, returning the previous value.",63,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",63,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",63,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",63,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",63,null],[11,"default","","",64,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",64,null],[11,"new","","Creates a new atomic integer.",64,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",64,null],[11,"store","","Stores a value into the atomic integer.",64,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",64,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",64,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",64,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",64,null],[11,"fetch_add","","Add to the current value, returning the previous value.",64,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",64,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",64,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",64,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",64,null],[11,"default","","",65,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",65,null],[11,"new","","Creates a new atomic integer.",65,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",65,null],[11,"store","","Stores a value into the atomic integer.",65,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",65,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",65,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",65,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",65,null],[11,"fetch_add","","Add to the current value, returning the previous value.",65,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",65,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",65,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",65,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",65,null],[11,"default","","",66,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",66,null],[11,"new","","Creates a new atomic integer.",66,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",66,null],[11,"store","","Stores a value into the atomic integer.",66,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",66,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",66,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",66,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",66,null],[11,"fetch_add","","Add to the current value, returning the previous value.",66,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",66,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",66,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",66,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",66,null],[11,"default","","",67,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",67,null],[11,"new","","Creates a new atomic integer.",67,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",67,null],[11,"store","","Stores a value into the atomic integer.",67,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",67,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",67,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",67,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",67,null],[11,"fetch_add","","Add to the current value, returning the previous value.",67,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",67,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",67,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",67,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",67,null],[11,"default","","",68,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",68,null],[11,"new","","Creates a new atomic integer.",68,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",68,null],[11,"store","","Stores a value into the atomic integer.",68,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",68,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",68,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",68,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",68,null],[11,"fetch_add","","Add to the current value, returning the previous value.",68,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",68,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",68,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",68,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",68,null],[11,"default","","",69,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",69,null],[11,"new","","Creates a new atomic integer.",69,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",69,null],[11,"store","","Stores a value into the atomic integer.",69,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",69,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",69,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",69,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",69,null],[11,"fetch_add","","Add to the current value, returning the previous value.",69,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",69,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",69,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",69,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",69,null],[11,"default","","",70,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",70,null],[11,"new","","Creates a new atomic integer.",70,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",70,null],[11,"store","","Stores a value into the atomic integer.",70,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",70,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",70,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",70,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",70,null],[11,"fetch_add","","Add to the current value, returning the previous value.",70,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",70,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",70,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",70,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",70,null],[11,"default","","",71,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",71,null],[11,"new","","Creates a new atomic integer.",71,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",71,null],[11,"store","","Stores a value into the atomic integer.",71,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",71,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",71,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",71,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",71,null],[11,"fetch_add","","Add to the current value, returning the previous value.",71,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",71,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",71,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",71,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",71,null],[11,"default","","",72,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",72,null],[11,"new","","Creates a new atomic integer.",72,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",72,null],[11,"store","","Stores a value into the atomic integer.",72,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",72,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",72,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",72,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",72,null],[11,"fetch_add","","Add to the current value, returning the previous value.",72,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",72,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",72,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",72,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",72,null],[11,"fmt","","",60,null],[11,"fmt","","",61,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",73,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",73,null],[11,"set","","Sets the contained value.",73,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",73,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",73,null],[11,"clone","","",73,null],[11,"default","","",73,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",73,null],[11,"partial_cmp","","",73,null],[11,"lt","","",73,null],[11,"le","","",73,null],[11,"gt","","",73,null],[11,"ge","","",73,null],[11,"cmp","","",73,null],[11,"fmt","","",74,null],[11,"eq","","",74,null],[11,"clone","","",74,null],[11,"new","","Creates a new `RefCell` containing `value`.",75,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",75,null],[11,"borrow_state","","Query the current state of this `RefCell`",75,null],[11,"borrow","","Immutably borrows the wrapped value.",75,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",75,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",75,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",75,null],[11,"clone","","",75,null],[11,"default","","",75,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",75,null],[11,"partial_cmp","","",75,null],[11,"lt","","",75,null],[11,"le","","",75,null],[11,"gt","","",75,null],[11,"ge","","",75,null],[11,"cmp","","",75,null],[11,"deref","","",76,null],[11,"clone","","Copies a `Ref`.",76,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",76,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",76,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",77,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",77,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",77,null],[11,"deref_mut","","",77,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",78,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",78,null],[11,"get","","Gets a mutable pointer to the wrapped value.",78,null],[11,"default","","",78,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",79,null],[11,"clone","","",79,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"count","","",79,null],[11,"last","","",79,null],[11,"len","","",79,null],[11,"fmt","","",80,null],[11,"clone","","",80,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"count","","",80,null],[11,"nth","","",80,null],[11,"last","","",80,null],[11,"len","","",80,null],[11,"fmt","","",81,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"fmt","","",82,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"fmt","core::iter::range","",83,null],[11,"clone","","",83,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",53,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",52,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",55,null],[11,"next","core::iter::range","",83,null],[11,"size_hint","","",83,null],[11,"next","","",83,null],[11,"size_hint","","",83,null],[11,"next","","",83,null],[11,"size_hint","","",83,null],[11,"next","core::ops","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"next","","",53,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"next_back","","",55,null],[11,"fmt","core::iter::sources","",84,null],[11,"clone","","",84,null],[11,"next","","",84,null],[11,"size_hint","","",84,null],[11,"next_back","","",84,null],[11,"fmt","","",85,null],[11,"next","","",85,null],[11,"size_hint","","",85,null],[11,"next_back","","",85,null],[11,"len","","",85,null],[11,"clone","","",85,null],[11,"default","","",85,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",86,null],[11,"clone","","",86,null],[11,"next","","",86,null],[11,"size_hint","","",86,null],[11,"next_back","","",86,null],[11,"len","","",86,null],[11,"fmt","core::iter","",87,null],[11,"clone","","",87,null],[11,"next","","",87,null],[11,"size_hint","","",87,null],[11,"next_back","","",87,null],[11,"fmt","","",88,null],[11,"clone","","",88,null],[11,"next","","",88,null],[11,"size_hint","","",88,null],[11,"next_back","","",88,null],[11,"fmt","","",89,null],[11,"clone","","",89,null],[11,"next","","",89,null],[11,"size_hint","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"next","","",90,null],[11,"count","","",90,null],[11,"nth","","",90,null],[11,"find","","",90,null],[11,"last","","",90,null],[11,"size_hint","","",90,null],[11,"next_back","","",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"clone","","",92,null],[11,"fmt","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"next_back","","",92,null],[11,"clone","","",93,null],[11,"fmt","","",93,null],[11,"next","","",93,null],[11,"size_hint","","",93,null],[11,"next_back","","",93,null],[11,"clone","","",94,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"size_hint","","",94,null],[11,"next_back","","",94,null],[11,"fmt","","",95,null],[11,"clone","","",95,null],[11,"next","","# Overflow Behavior",95,null],[11,"size_hint","","",95,null],[11,"nth","","",95,null],[11,"count","","",95,null],[11,"next_back","","",95,null],[11,"fmt","","",96,null],[11,"clone","","",96,null],[11,"next","","",96,null],[11,"count","","",96,null],[11,"nth","","",96,null],[11,"last","","",96,null],[11,"size_hint","","",96,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",96,null],[11,"is_empty","","Checks if the iterator has finished iterating.",96,null],[11,"clone","","",97,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"size_hint","","",97,null],[11,"clone","","",98,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"size_hint","","",98,null],[11,"fmt","","",99,null],[11,"clone","","",99,null],[11,"next","","",99,null],[11,"nth","","",99,null],[11,"count","","",99,null],[11,"last","","",99,null],[11,"size_hint","","",99,null],[11,"next_back","","",99,null],[11,"fmt","","",100,null],[11,"clone","","",100,null],[11,"next","","",100,null],[11,"nth","","",100,null],[11,"size_hint","","",100,null],[11,"clone","","",101,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"size_hint","","",101,null],[11,"clone","","",102,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"size_hint","","",102,null],[11,"next_back","","",102,null],[11,"fmt","","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"nth","","",103,null],[11,"last","","",103,null],[11,"count","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"clone","","",104,null],[11,"fmt","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"hash","core::option","",41,null],[11,"fmt","","",41,null],[11,"cmp","","",41,null],[11,"partial_cmp","","",41,null],[11,"lt","","",41,null],[11,"le","","",41,null],[11,"gt","","",41,null],[11,"ge","","",41,null],[11,"eq","","",41,null],[11,"ne","","",41,null],[11,"clone","","",41,null],[11,"default","","",41,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",41,null],[11,"fmt","","",105,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"next_back","","",105,null],[11,"clone","","",105,null],[11,"fmt","","",106,null],[11,"next","","",106,null],[11,"size_hint","","",106,null],[11,"next_back","","",106,null],[11,"fmt","","",107,null],[11,"clone","","",107,null],[11,"next","","",107,null],[11,"size_hint","","",107,null],[11,"next_back","","",107,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",41,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",108,null],[11,"clone","","",109,null],[11,"hash","core::result","",110,null],[11,"fmt","","",110,null],[11,"cmp","","",110,null],[11,"partial_cmp","","",110,null],[11,"lt","","",110,null],[11,"le","","",110,null],[11,"gt","","",110,null],[11,"ge","","",110,null],[11,"eq","","",110,null],[11,"ne","","",110,null],[11,"clone","","",110,null],[11,"is_ok","","Returns true if the result is `Ok`",110,null],[11,"is_err","","Returns true if the result is `Err`",110,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",110,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",110,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",110,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",110,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",110,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",110,null],[11,"iter","","Returns an iterator over the possibly contained value.",110,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",110,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",110,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",110,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",110,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",110,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",110,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",110,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",110,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",110,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",110,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",110,null],[11,"fmt","","",111,null],[11,"next","","",111,null],[11,"size_hint","","",111,null],[11,"next_back","","",111,null],[11,"clone","","",111,null],[11,"fmt","","",112,null],[11,"next","","",112,null],[11,"size_hint","","",112,null],[11,"next_back","","",112,null],[11,"fmt","","",113,null],[11,"next","","",113,null],[11,"size_hint","","",113,null],[11,"next_back","","",113,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",110,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",114,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",114,null],[11,"next","","",114,null],[11,"size_hint","","",114,null],[11,"count","","",114,null],[11,"nth","","",114,null],[11,"last","","",114,null],[11,"next_back","","",114,null],[11,"clone","","",114,null],[11,"fmt","","",115,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",115,null],[11,"next","","",115,null],[11,"size_hint","","",115,null],[11,"count","","",115,null],[11,"nth","","",115,null],[11,"last","","",115,null],[11,"next_back","","",115,null],[11,"fmt","","",116,null],[11,"clone","","",116,null],[11,"next","","",116,null],[11,"size_hint","","",116,null],[11,"next_back","","",116,null],[11,"fmt","","",117,null],[11,"next","","",117,null],[11,"size_hint","","",117,null],[11,"next_back","","",117,null],[11,"fmt","","",118,null],[11,"fmt","","",119,null],[11,"fmt","","",120,null],[11,"fmt","","",121,null],[11,"next","","",118,null],[11,"size_hint","","",118,null],[11,"next","","",119,null],[11,"size_hint","","",119,null],[11,"next","","",120,null],[11,"size_hint","","",120,null],[11,"next","","",121,null],[11,"size_hint","","",121,null],[11,"fmt","","",122,null],[11,"clone","","",122,null],[11,"next","","",122,null],[11,"size_hint","","",122,null],[11,"count","","",122,null],[11,"nth","","",122,null],[11,"last","","",122,null],[11,"next_back","","",122,null],[11,"fmt","","",123,null],[11,"clone","","",123,null],[11,"next","","",123,null],[11,"size_hint","","",123,null],[11,"count","","",123,null],[11,"nth","","",123,null],[11,"last","","",123,null],[11,"next_back","","",123,null],[11,"fmt","","",124,null],[11,"next","","",124,null],[11,"size_hint","","",124,null],[11,"count","","",124,null],[11,"nth","","",124,null],[11,"last","","",124,null],[11,"next_back","","",124,null],[11,"fmt","core::str::pattern","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"clone","","",125,null],[11,"fmt","","",126,null],[11,"clone","","",126,null],[11,"haystack","","",126,null],[11,"next","","",126,null],[11,"next_match","","",126,null],[11,"next_reject","","",126,null],[11,"next_back","","",126,null],[11,"next_match_back","","",126,null],[11,"next_reject_back","","",126,null],[11,"fmt","","",127,null],[11,"clone","","",127,null],[11,"haystack","","",127,null],[11,"next","","",127,null],[11,"next_match","","",127,null],[11,"next_reject","","",127,null],[11,"next_back","","",127,null],[11,"next_match_back","","",127,null],[11,"next_reject_back","","",127,null],[11,"clone","","",128,null],[11,"fmt","","",128,null],[11,"haystack","","",128,null],[11,"next","","",128,null],[11,"next_match","","",128,null],[11,"next_reject","","",128,null],[11,"next_back","","",128,null],[11,"next_match_back","","",128,null],[11,"next_reject_back","","",128,null],[11,"fmt","","",129,null],[11,"clone","","",129,null],[11,"haystack","","",129,null],[11,"next","","",129,null],[11,"next_match","","",129,null],[11,"next_back","","",129,null],[11,"next_match_back","","",129,null],[11,"eq","core::str","",130,null],[11,"ne","","",130,null],[11,"clone","","",130,null],[11,"fmt","","",130,null],[11,"fmt","","",130,null],[11,"fmt","","",131,null],[11,"clone","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",131,null],[11,"fmt","","",131,null],[11,"fmt","","",132,null],[11,"clone","","",132,null],[11,"next","","",132,null],[11,"size_hint","","",132,null],[11,"next_back","","",132,null],[11,"as_str","","View the underlying data as a subslice of the original data.",132,null],[11,"fmt","","",133,null],[11,"clone","","",133,null],[11,"next","","",133,null],[11,"size_hint","","",133,null],[11,"next_back","","",133,null],[11,"as_str","","View the underlying data as a subslice of the original data.",133,null],[11,"fmt","","",134,null],[11,"clone","","",134,null],[11,"next","","",134,null],[11,"size_hint","","",134,null],[11,"count","","",134,null],[11,"last","","",134,null],[11,"nth","","",134,null],[11,"next_back","","",134,null],[11,"len","","",134,null],[11,"fmt","","",135,null],[11,"next","","",135,null],[11,"clone","","",135,null],[11,"fmt","","",136,null],[11,"next","","",136,null],[11,"clone","","",136,null],[11,"next_back","","",135,null],[11,"next_back","","",136,null],[11,"fmt","","",137,null],[11,"next","","",137,null],[11,"clone","","",137,null],[11,"fmt","","",138,null],[11,"next","","",138,null],[11,"clone","","",138,null],[11,"next_back","","",137,null],[11,"next_back","","",138,null],[11,"fmt","","",139,null],[11,"next","","",139,null],[11,"clone","","",139,null],[11,"fmt","","",140,null],[11,"next","","",140,null],[11,"clone","","",140,null],[11,"fmt","","",141,null],[11,"next","","",141,null],[11,"clone","","",141,null],[11,"fmt","","",142,null],[11,"next","","",142,null],[11,"clone","","",142,null],[11,"next_back","","",141,null],[11,"next_back","","",142,null],[11,"fmt","","",143,null],[11,"next","","",143,null],[11,"clone","","",143,null],[11,"fmt","","",144,null],[11,"next","","",144,null],[11,"clone","","",144,null],[11,"next_back","","",143,null],[11,"next_back","","",144,null],[11,"fmt","","",145,null],[11,"clone","","",145,null],[11,"next","","",145,null],[11,"size_hint","","",145,null],[11,"next_back","","",145,null],[11,"fmt","","",146,null],[11,"clone","","",146,null],[11,"next","","",146,null],[11,"size_hint","","",146,null],[11,"next_back","","",146,null],[11,"fmt","","",147,null],[11,"clone","","",147,null],[11,"fmt","core::hash::sip","",148,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",148,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",148,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",148,null],[11,"finish","","",148,null],[11,"clone","","",148,null],[11,"default","","",148,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",149,null],[11,"build_hasher","","",149,null],[11,"clone","","",149,null],[11,"default","","",149,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",150,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",151,null],[11,"finish","","Finishes output and returns any error encountered.",151,null],[11,"field","","Adds a new field to the generated tuple struct output.",152,null],[11,"finish","","Finishes output and returns any error encountered.",152,null],[11,"entry","","Adds a new entry to the set output.",153,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",153,null],[11,"finish","","Finishes output and returns any error encountered.",153,null],[11,"entry","","Adds a new entry to the list output.",154,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",154,null],[11,"finish","","Finishes output and returns any error encountered.",154,null],[11,"entry","","Adds a new entry to the map output.",155,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",155,null],[11,"finish","","Finishes output and returns any error encountered.",155,null],[11,"partial_cmp","core::fmt","",156,null],[11,"eq","","",156,null],[11,"cmp","","",156,null],[11,"hash","","",156,null],[11,"default","","",156,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",156,null],[11,"clone","","",156,null],[11,"clone","","",157,null],[11,"fmt","","",157,null],[11,"fmt","","",157,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",158,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",158,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",158,null],[11,"write_fmt","","Writes some formatted information into this instance",158,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",158,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",158,null],[11,"align","","Flag indicating what form of alignment was requested",158,null],[11,"width","","Optionally specified integer width that the output should be",158,null],[11,"precision","","Optionally specified precision for numeric types",158,null],[11,"sign_plus","","Determines if the `+` flag was specified.",158,null],[11,"sign_minus","","Determines if the `-` flag was specified.",158,null],[11,"alternate","","Determines if the `#` flag was specified.",158,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",158,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",158,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",158,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",158,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",158,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",158,null],[11,"write_str","","",158,null],[11,"write_char","","",158,null],[11,"write_fmt","","",158,null],[11,"fmt","","",156,null],[11,"fmt","core::marker","",50,null],[11,"fmt","core::cell","",73,null],[11,"fmt","","",75,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",159,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",159,null],[11,"clone","libc","",160,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",161,null],[11,"clone","","",162,null],[11,"clone","","",163,null],[11,"clone","","",164,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",165,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",166,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"off_t","","",null,null],[6,"useconds_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_t","","",null,null],[6,"nfds_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"rlim_t","","",null,null],[6,"mach_timebase_info_data_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"sigset_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PATH_MAX","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"CTL_HW","","",null,null],[17,"HW_NCPU","","",null,null],[17,"EV_ADD","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_ERROR","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NCCS","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"WNOHANG","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EPWROFF","","",null,null],[17,"EDEVERR","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"EBADEXEC","","",null,null],[17,"EBADARCH","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ECANCELED","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODATA","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSR","","",null,null],[17,"ENOSTR","","",null,null],[17,"EPROTO","","",null,null],[17,"ETIME","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EQFULL","","",null,null],[17,"ELAST","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_PREALLOCATE","","",null,null],[17,"F_RDADVISE","","",null,null],[17,"F_RDAHEAD","","",null,null],[17,"F_NOCACHE","","",null,null],[17,"F_GETPATH","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"F_FREEZE_FS","","",null,null],[17,"F_THAW_FS","","",null,null],[17,"F_GLOBAL_NOCACHE","","",null,null],[17,"F_NODIRECT","","",null,null],[17,"F_ALLOCATECONTIG","","",null,null],[17,"F_ALLOCATEALL","","",null,null],[17,"F_PEOFPOSMODE","","",null,null],[17,"F_VOLPOSMODE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"_PTHREAD_MUTEX_SIG_init","","",null,null],[17,"_PTHREAD_COND_SIG_init","","",null,null],[17,"_PTHREAD_RWLOCK_SIG_init","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"HW_AVAILCPU","","",null,null],[17,"EVFILT_AIO","","",null,null],[17,"EVFILT_PROC","","",null,null],[17,"EVFILT_READ","","",null,null],[17,"EVFILT_SIGNAL","","",null,null],[17,"EVFILT_SYSCOUNT","","",null,null],[17,"EVFILT_TIMER","","",null,null],[17,"EVFILT_VNODE","","",null,null],[17,"EVFILT_WRITE","","",null,null],[17,"EVFILT_FS","","",null,null],[17,"EVFILT_MACHPORT","","",null,null],[17,"EVFILT_USER","","",null,null],[17,"EVFILT_VM","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_OOBAND","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"TAB3","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"IUTF8","","",null,null],[17,"CRTSCTS","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_FIRST","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"__PTHREAD_MUTEX_SIZE__","","",null,null],[17,"__PTHREAD_COND_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCK_SIZE__","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[4,"Option"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_rwlock_t"],[3,"fd_set"],[3,"fsid_t"]]};
initSearch(searchIndex);
